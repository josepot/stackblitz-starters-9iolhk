{
  "version": 3,
  "sources": ["../src/worker.ts"],
  "sourcesContent": ["import { toHex } from \"@unstoppablejs/utils\"\nimport { parentPort, workerData } from \"node:worker_threads\"\nconst { randomBytes } = await import(\"node:crypto\")\n\nconst RESULT_SIZE: number = workerData.resultSize\n// We first create the data that we want to send\nconst dataToSend = Array(RESULT_SIZE)\n  .fill(null)\n  .map(() => toHex(randomBytes(100)))\n\n// now let's create the batched and nonBatched messages that we are going to send\nconst createJsonRpcSubscriptionMessage = (\n  subscription: number,\n  event: string,\n  value: string | string[],\n) =>\n  JSON.stringify({\n    jsonrpc: \"2.0\",\n    params: { subscription, result: { event, value } },\n  })\n\n// non-batched/\"item\" messages\nconst nonBatchedMessages = dataToSend.map((value) =>\n  createJsonRpcSubscriptionMessage(1, \"item\", value),\n)\n\n// batched/\"items\" messages\nconst BATCH_SIZE = workerData.batchSize\nconst batchedMessages: Array<string> = []\nfor (let i = 0; i < dataToSend.length; i += BATCH_SIZE)\n  batchedMessages.push(\n    createJsonRpcSubscriptionMessage(\n      2,\n      \"items\",\n      dataToSend.slice(i, i + BATCH_SIZE),\n    ),\n  )\n\nlet start = 0\nlet end = 0\n\n// Once we receive a message from the main-thread we record the starting time\n// and we start sending the non-batched messages\nawait new Promise<void>((res) => {\n  parentPort?.once(\"message\", () => {\n    res()\n    start = Date.now()\n    nonBatchedMessages.forEach((message) => {\n      parentPort?.postMessage(message)\n    })\n    parentPort?.postMessage(createJsonRpcSubscriptionMessage(1, \"done\", \"\"))\n  })\n})\n\n// We wait to receive a message from the main-thread confirming that all the\n// messages sent have been processed, and we record the time when that happens\nawait new Promise<void>((res) => {\n  parentPort?.once(\"message\", () => {\n    end = Date.now()\n    res()\n  })\n})\nconsole.log(`non batched took ${end - start}`)\n\n// Once we receive a message from the main-thread we record the starting time\n// and we start sending the batched messages\nawait new Promise<void>((res) => {\n  parentPort?.once(\"message\", () => {\n    res()\n    start = Date.now()\n    batchedMessages.forEach((message) => {\n      parentPort?.postMessage(message)\n    })\n    parentPort?.postMessage(createJsonRpcSubscriptionMessage(2, \"done\", \"\"))\n  })\n})\n\n// We wait to receive a message from the main-thread confirming that all the\n// messages sent have been processed, and we record the time when that happens\nawait new Promise<void>((res) => {\n  parentPort?.once(\"message\", () => {\n    end = Date.now()\n    res()\n  })\n})\nconsole.log(`batched took ${end - start}`)\n\nparentPort?.close()\n"],
  "mappings": ";AAAA,SAAS,aAAa;AACtB,SAAS,YAAY,kBAAkB;AACvC,IAAM,EAAE,YAAY,IAAI,MAAM,OAAO,aAAa;AAElD,IAAM,cAAsB,WAAW;AAEvC,IAAM,aAAa,MAAM,WAAW,EACjC,KAAK,IAAI,EACT,IAAI,MAAM,MAAM,YAAY,GAAG,CAAC,CAAC;AAGpC,IAAM,mCAAmC,CACvC,cACA,OACA,UAEA,KAAK,UAAU;AAAA,EACb,SAAS;AAAA,EACT,QAAQ,EAAE,cAAc,QAAQ,EAAE,OAAO,MAAM,EAAE;AACnD,CAAC;AAGH,IAAM,qBAAqB,WAAW;AAAA,EAAI,CAAC,UACzC,iCAAiC,GAAG,QAAQ,KAAK;AACnD;AAGA,IAAM,aAAa,WAAW;AAC9B,IAAM,kBAAiC,CAAC;AACxC,SAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAC1C,kBAAgB;AAAA,IACd;AAAA,MACE;AAAA,MACA;AAAA,MACA,WAAW,MAAM,GAAG,IAAI,UAAU;AAAA,IACpC;AAAA,EACF;AAEF,IAAI,QAAQ;AACZ,IAAI,MAAM;AAIV,MAAM,IAAI,QAAc,CAAC,QAAQ;AAC/B,cAAY,KAAK,WAAW,MAAM;AAChC,QAAI;AACJ,YAAQ,KAAK,IAAI;AACjB,uBAAmB,QAAQ,CAAC,YAAY;AACtC,kBAAY,YAAY,OAAO;AAAA,IACjC,CAAC;AACD,gBAAY,YAAY,iCAAiC,GAAG,QAAQ,EAAE,CAAC;AAAA,EACzE,CAAC;AACH,CAAC;AAID,MAAM,IAAI,QAAc,CAAC,QAAQ;AAC/B,cAAY,KAAK,WAAW,MAAM;AAChC,UAAM,KAAK,IAAI;AACf,QAAI;AAAA,EACN,CAAC;AACH,CAAC;AACD,QAAQ,IAAI,oBAAoB,MAAM,OAAO;AAI7C,MAAM,IAAI,QAAc,CAAC,QAAQ;AAC/B,cAAY,KAAK,WAAW,MAAM;AAChC,QAAI;AACJ,YAAQ,KAAK,IAAI;AACjB,oBAAgB,QAAQ,CAAC,YAAY;AACnC,kBAAY,YAAY,OAAO;AAAA,IACjC,CAAC;AACD,gBAAY,YAAY,iCAAiC,GAAG,QAAQ,EAAE,CAAC;AAAA,EACzE,CAAC;AACH,CAAC;AAID,MAAM,IAAI,QAAc,CAAC,QAAQ;AAC/B,cAAY,KAAK,WAAW,MAAM;AAChC,UAAM,KAAK,IAAI;AACf,QAAI;AAAA,EACN,CAAC;AACH,CAAC;AACD,QAAQ,IAAI,gBAAgB,MAAM,OAAO;AAEzC,YAAY,MAAM;",
  "names": []
}
